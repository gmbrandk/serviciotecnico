// üìÅ services/equipos/crearEquipoService.js

const Equipo = require('@models/Equipo');
const FichaTecnica = require('@models/FichaTecnica');
const vincularFichaTecnica = require('@helpers/equipos/vincularFichaTecnica');
const inicializarHistorialClientes = require('@helpers/equipos/inicializarHistorialClientes');
const calcularEspecificacionesEquipo = require('@helpers/equipos/calcularEspecificacionesEquipo');
const {
  ValidationError,
  DuplicateError,
  NotFoundError,
} = require('@utils/errors');

const crearEquipoService = async (data) => {
  // ‚ú® Desestructurar campos esperados del payload
  const {
    tipo,
    marca,
    modelo,
    sku,
    nroSerie,
    clienteActual,
    fichaTecnicaManual,
    ...resto
  } = data;

  // üö® Validaci√≥n m√≠nima obligatoria
  // üö® Validaciones expl√≠citas y separadas
  if (!tipo) {
    throw new ValidationError('El campo "tipo" es obligatorio');
  }

  if (!modelo) {
    throw new ValidationError('El campo "modelo" es obligatorio');
  }

  if (!clienteActual) {
    throw new ValidationError('El campo "clienteActual" es obligatorio');
  }

  // üßº Sanitizaci√≥n y formateo
  const modeloSanitizado = modelo.trim().toUpperCase();
  const skuSanitizado = sku?.trim().toUpperCase();
  const nroSerieSanitizado = nroSerie?.trim().toUpperCase();

  // üîç Validar duplicado de n√∫mero de serie
  if (nroSerieSanitizado) {
    const yaExiste = await Equipo.findOne({ nroSerie: nroSerieSanitizado });
    if (yaExiste) {
      throw new DuplicateError('Ya existe un equipo con ese n√∫mero de serie');
    }
  }

  // üîç Buscar plantilla t√©cnica autom√°tica (de base de datos o API)
  let fichaTecnica;
  try {
    fichaTecnica = await vincularFichaTecnica({
      modelo: modeloSanitizado,
      sku: skuSanitizado,
    });
  } catch (err) {
    throw new Error('Error al buscar la ficha t√©cnica: ' + err.message);
  }

  console.log(
    '[crearEquipoService] fichaTecnica encontrada:',
    fichaTecnica?._id || null
  );

  // üß† Si no se encontr√≥ una ficha autom√°tica Y se mand√≥ fichaManual => crearla
  if (!fichaTecnica && fichaTecnicaManual) {
    // üõ°Ô∏è Verificar si ya existe una ficha t√©cnica manual con modelo + sku
    const fichaExistente = await FichaTecnica.findOne({
      modelo: modeloSanitizado,
      sku: skuSanitizado,
      fuente: 'manual', // Solo buscamos fichas ingresadas manualmente
    });

    if (fichaExistente) {
      fichaTecnica = fichaExistente; // ‚úÖ Usamos la ya existente
    } else {
      // ‚úÖ Creamos una nueva ficha t√©cnica manual
      const fichaManualData = {
        ...fichaTecnicaManual,
        modelo: modeloSanitizado,
        sku: skuSanitizado,
        fuente: 'manual',
      };

      try {
        fichaTecnica = await FichaTecnica.create(fichaManualData);
      } catch (err) {
        throw new ValidationError(
          'Error al crear la ficha t√©cnica manual: ' + err.message
        );
      }
    }
  }

  // üìú Inicializamos historial de propietarios
  const historialPropietarios = inicializarHistorialClientes(clienteActual);

  // üß† Calculamos las especificaciones actuales y si est√° repotenciado
  const { especificacionesActuales, repotenciado } =
    calcularEspecificacionesEquipo(fichaTecnica, fichaTecnicaManual || {});

  // üõ†Ô∏è Creamos el nuevo equipo
  const nuevoEquipo = new Equipo({
    tipo: tipo.trim(),
    marca: marca?.trim(),
    modelo: modeloSanitizado,
    sku: skuSanitizado,
    nroSerie: nroSerieSanitizado,
    clienteActual,
    fichaTecnica: fichaTecnica?._id || null,
    historialPropietarios,
    especificacionesActuales,
    repotenciado,
    ...resto,
  });

  // üíæ Guardamos en la base de datos
  try {
    await nuevoEquipo.save();
  } catch (err) {
    throw new Error('Error al guardar el equipo: ' + err.message);
  }

  return nuevoEquipo;
};

module.exports = crearEquipoService;
