// üìÅ __tests__/utils/validarYFormatearTelefono.test.js
const validarYFormatearTelefono = require('@utils/telefonia/validarYFormatearTelefono');

console.log('üß™ Iniciando pruebas de validaci√≥n de tel√©fonos...');

describe('üìû Validar y Formatear Tel√©fono', () => {
  test('‚úÖ Tel√©fono peruano sin prefijo', () => {
    const resultado = validarYFormatearTelefono('987654321');
    console.log('üîç Detectado Per√∫:', resultado);
    expect(resultado.telefonoFormateado).toBe('+51987654321');
    expect(resultado.iso).toBe('PE');
    expect(resultado.longitudEsperada || 9).toBe(9);
  });

  test('‚úÖ Tel√©fono chileno con prefijo', () => {
    const resultado = validarYFormatearTelefono('+56987654321');
    console.log('üîç Detectado Chile:', resultado);
    expect(resultado.telefonoFormateado).toBe('+56987654321');
    expect(resultado.iso).toBe('CL');
  });

  test('‚ùå Tel√©fono argentino con longitud incorrecta', () => {
    try {
      validarYFormatearTelefono('+5498765432');
    } catch (error) {
      console.warn('‚ö†Ô∏è Longitud inv√°lida para Argentina:', error.message);
      expect(error.message).toMatch(/debe tener/);
    }
  });

  test('‚ùå Prefijo no reconocido', () => {
    try {
      validarYFormatearTelefono('+9999999999');
    } catch (error) {
      console.warn('üö´ Prefijo desconocido:', error.message);
      expect(error.message).toMatch(/no reconocido/);
    }
  });

  test('‚ùå Tel√©fono peruano con menos d√≠gitos', () => {
    try {
      validarYFormatearTelefono('98765');
    } catch (error) {
      console.warn('‚ö†Ô∏è Tel√©fono incompleto para Per√∫:', error.message);
      expect(error.message).toMatch(/9 d√≠gitos/);
    }
  });
});
